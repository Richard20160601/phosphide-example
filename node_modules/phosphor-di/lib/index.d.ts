/**
 * An enum which defines the registration lifetime policies.
 */
export declare enum Lifetime {
    /**
     * A single instance is created and shared among all consumers.
     */
    Singleton = 0,
    /**
     * A new instance is created each time one is requested.
     */
    Transient = 1,
}
/**
 * A run-time token object which holds compile-time type information.
 */
export declare class Token<T> {
    /**
     * Construct a new token object.
     *
     * @param name - A human readable name for the token.
     */
    constructor(name: string);
    /**
     * Get the human readable name for the token.
     *
     * #### Note
     * This is a read-only property.
     */
    name: string;
    private _name;
    private _tokenStructuralPropertyT;
}
/**
 * A factory which declares its dependencies.
 */
export interface IFactory<T> {
    /**
     * The lifetime policy for the registration.
     *
     * The default value is `Lifetime.Singleton`.
     */
    lifetime?: Lifetime;
    /**
     * The dependencies required to create the instance.
     */
    requires: Token<any>[];
    /**
     * Create a new instance of the type.
     *
     * @param args - The resolved dependencies specified by `requires`.
     *
     * @returns A new instance of the type, or a Promise to an instance.
     */
    create(...args: any[]): T | Promise<T>;
}
/**
 * A lightweight dependency injection container.
 */
export declare class Container {
    /**
     * Test whether a token is registered with the container.
     *
     * @param token - The run-time type token of interest.
     *
     * @returns `true` if the token is registered, `false` otherwise.
     */
    isRegistered(token: Token<any>): boolean;
    /**
     * Register a type mapping for the specified token.
     *
     * @param token - The run-time type token of interest.
     *
     * @param factory - The factory which will create the instance.
     *
     * #### Notes
     * If the token is already registered, or if registering the factory
     * would cause a circular dependency, an error will be logged to the
     * console and the registration will be ignored.
     */
    register<T>(token: Token<T>, factory: IFactory<T>): void;
    /**
     * Resolve an instance for the given token or factory.
     *
     * @param value - The token or factory object to resolve.
     *
     * @returns A promise which resolves to an instance of the requested
     *   type, or rejects with an error if an instance fails to resolve.
     */
    resolve<T>(value: Token<T> | IFactory<T>): Promise<T>;
    private _registry;
}
