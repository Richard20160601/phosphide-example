import { Message } from 'phosphor-messaging';
import { IChangedArgs } from 'phosphor-properties';
import { ISignal } from 'phosphor-signaling';
import { Title, Widget } from 'phosphor-widget';
/**
 * The arguments object for a `tabMoved` signal.
 */
export interface ITabMovedArgs {
    /**
     * The previous index of the tab.
     */
    fromIndex: number;
    /**
     * The current index of the tab.
     */
    toIndex: number;
}
/**
 * The arguments object for a `tabDetachRequested` signal.
 */
export interface ITabDetachArgs {
    /**
     * The title being dragged by the user.
     */
    title: Title;
    /**
     * The DOM node for the tab being dragged.
     */
    node: HTMLElement;
    /**
     * The current client X position of the mouse.
     */
    clientX: number;
    /**
     * The current client Y position of the mouse.
     */
    clientY: number;
}
/**
 * A widget which displays titles as a row of selectable tabs.
 */
export declare class TabBar extends Widget {
    /**
     * Create the DOM node for a tab bar.
     */
    static createNode(): HTMLElement;
    /**
     * Construct a new tab bar.
     */
    constructor();
    /**
     * Dispose of the resources held by the widget.
     */
    dispose(): void;
    /**
     * A signal emitted when a tab is moved by the user.
     */
    tabMoved: ISignal<TabBar, ITabMovedArgs>;
    /**
     * A signal emitted when the user clicks a tab's close icon.
     */
    tabCloseRequested: ISignal<TabBar, Title>;
    /**
     * A signal emitted when a tab is dragged beyond the detach threshold.
     */
    tabDetachRequested: ISignal<TabBar, ITabDetachArgs>;
    /**
     * A signal emitted when the current title is changed.
     */
    currentChanged: ISignal<TabBar, IChangedArgs<Title>>;
    /**
     * Get the currently selected title.
     */
    /**
     * Set the currently selected title.
     */
    currentTitle: Title;
    /**
     * Get whether the tabs are movable by the user.
     */
    /**
     * Set whether the tabs are movable by the user.
     */
    tabsMovable: boolean;
    /**
     * Get the tab bar header node.
     *
     * #### Notes
     * This can be used to add extra header content.
     *
     * This is a read-only property.
     */
    headerNode: HTMLElement;
    /**
     * Get the tab bar body node.
     *
     * #### Notes
     * This can be used to add extra body content.
     *
     * This is a read-only property.
     */
    bodyNode: HTMLElement;
    /**
     * Get the tab bar content node.
     *
     * #### Notes
     * Modifying this node can lead to undefined behavior.
     *
     * This is a read-only property.
     */
    contentNode: HTMLElement;
    /**
     * Get the tab bar footer node.
     *
     * #### Notes
     * This can be used to add extra footer content.
     *
     * This is a read-only property.
     */
    footerNode: HTMLElement;
    /**
     * Get the number of title objects in the tab bar.
     *
     * @returns The number of title objects in the tab bar.
     */
    titleCount(): number;
    /**
     * Get the title object at the specified index.
     *
     * @param index - The index of the title object of interest.
     *
     * @returns The title at the specified index, or `undefined`.
     */
    titleAt(index: number): Title;
    /**
     * Get the index of the specified title object.
     *
     * @param title - The title object of interest.
     *
     * @returns The index of the specified title, or `-1`.
     */
    titleIndex(title: Title): number;
    /**
     * Add a title object to the end of the tab bar.
     *
     * @param title - The title object to add to the tab bar.
     *
     * #### Notes
     * If the title is already added to the tab bar, it will be moved.
     */
    addTitle(title: Title): void;
    /**
     * Insert a title object at the specified index.
     *
     * @param index - The index at which to insert the title.
     *
     * @param title - The title object to insert into to the tab bar.
     *
     * #### Notes
     * If the title is already added to the tab bar, it will be moved.
     */
    insertTitle(index: number, title: Title): void;
    /**
     * Remove a title object from the tab bar.
     *
     * @param title - The title object to remove from the tab bar.
     *
     * #### Notes
     * If the title is not in the tab bar, this is a no-op.
     */
    removeTitle(title: Title): void;
    /**
     * Release the mouse and restore the non-dragged tab positions.
     *
     * #### Notes
     * This will cause the tab bar to stop handling mouse events and to
     * restore the tabs to their non-dragged positions.
     */
    releaseMouse(): void;
    /**
     * Handle the DOM events for the tab bar.
     *
     * @param event - The DOM event sent to the tab bar.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the tab bar's DOM node. It should
     * not be called directly by user code.
     */
    handleEvent(event: Event): void;
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * A message handler invoked on a `'before-detach'` message.
     */
    protected onBeforeDetach(msg: Message): void;
    /**
     * A message handler invoked on an `'update-request'` message.
     */
    protected onUpdateRequest(msg: Message): void;
    /**
     * Handle the `'keydown'` event for the tab bar.
     */
    private _evtKeyDown(event);
    /**
     * Handle the `'click'` event for the tab bar.
     */
    private _evtClick(event);
    /**
     * Handle the `'mousedown'` event for the tab bar.
     */
    private _evtMouseDown(event);
    /**
     * Handle the `'mousemove'` event for the tab bar.
     */
    private _evtMouseMove(event);
    /**
     * Handle the `'mouseup'` event for the tab bar.
     */
    private _evtMouseUp(event);
    /**
     * Release the mouse and restore the non-dragged tab positions.
     */
    private _releaseMouse();
    /**
     * Move a tab from one index to another.
     */
    private _moveTab(i, j);
    /**
     * Handle the `changed` signal of a title object.
     */
    private _onTitleChanged(sender);
    private _dirty;
    private _tabsMovable;
    private _titles;
    private _dragData;
}
