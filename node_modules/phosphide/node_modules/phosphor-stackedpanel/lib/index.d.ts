import { Message } from 'phosphor-messaging';
import { IChangedArgs } from 'phosphor-properties';
import { ISignal } from 'phosphor-signaling';
import { Panel, PanelLayout, ResizeMessage, Widget } from 'phosphor-widget';
/**
 * A panel where only one child widget is visible at a time.
 *
 * #### Notes
 * This class provides a convenience wrapper around a [[StackedLayout]].
 */
export declare class StackedPanel extends Panel {
    /**
     * Create a stacked layout for a stacked panel.
     */
    static createLayout(): StackedLayout;
    /**
     * Construct a new stacked panel.
     */
    constructor();
    /**
     * A signal emitted when the current widget is changed.
     */
    currentChanged: ISignal<StackedPanel, IChangedArgs<Widget>>;
    /**
     * A signal emitted when a widget is removed from the panel.
     */
    widgetRemoved: ISignal<StackedPanel, Widget>;
    /**
     * Get the current panel widget.
     */
    /**
     * Set the current panel widget.
     */
    currentWidget: Widget;
}
/**
 * A layout where only one child widget is visible at a time.
 */
export declare class StackedLayout extends PanelLayout {
    /**
     * A signal emitted when the current widget is changed.
     */
    currentChanged: ISignal<StackedLayout, IChangedArgs<Widget>>;
    /**
     * A signal emitted when a widget is removed from the layout.
     */
    widgetRemoved: ISignal<StackedLayout, Widget>;
    /**
     * Get the current layout widget.
     */
    /**
     * Set the current layout widget.
     */
    currentWidget: Widget;
    /**
     * Attach a child widget to the parent's DOM node.
     *
     * @param index - The current index of the child in the layout.
     *
     * @param child - The child widget to attach to the parent.
     *
     * #### Notes
     * This is a reimplementation of the superclass method.
     */
    protected attachChild(index: number, child: Widget): void;
    /**
     * Move a child widget in the parent's DOM node.
     *
     * @param fromIndex - The previous index of the child in the layout.
     *
     * @param toIndex - The current index of the child in the layout.
     *
     * @param child - The child widget to move in the parent.
     *
     * #### Notes
     * This is a reimplementation of the superclass method.
     */
    protected moveChild(fromIndex: number, toIndex: number, child: Widget): void;
    /**
     * Detach a child widget from the parent's DOM node.
     *
     * @param index - The previous index of the child in the layout.
     *
     * @param child - The child widget to detach from the parent.
     *
     * #### Notes
     * This is a reimplementation of the superclass method.
     */
    protected detachChild(index: number, child: Widget): void;
    /**
     * A message handler invoked on an `'after-show'` message.
     */
    protected onAfterShow(msg: Message): void;
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * A message handler invoked on a `'resize'` message.
     */
    protected onResize(msg: ResizeMessage): void;
    /**
     * A message handler invoked on an `'update-request'` message.
     */
    protected onUpdateRequest(msg: Message): void;
    /**
     * A message handler invoked on a `'fit-request'` message.
     */
    protected onFitRequest(msg: Message): void;
}
