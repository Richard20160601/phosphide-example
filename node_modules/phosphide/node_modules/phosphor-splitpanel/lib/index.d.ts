import { Message } from 'phosphor-messaging';
import { ChildMessage, Panel, PanelLayout, ResizeMessage, Widget } from 'phosphor-widget';
/**
 * The layout orientation of a split layout.
 */
export declare enum Orientation {
    /**
     * Left-to-right horizontal orientation.
     */
    Horizontal = 0,
    /**
     * Top-to-bottom vertical orientation.
     */
    Vertical = 1,
}
/**
 * A panel which arranges its children into resizable sections.
 *
 * #### Notes
 * This class provides a convenience wrapper around a [[SplitLayout]].
 */
export declare class SplitPanel extends Panel {
    /**
     * Create a split layout for a split panel.
     */
    static createLayout(): SplitLayout;
    /**
     * Construct a new split panel.
     */
    constructor();
    /**
     * Dispose of the resources held by the panel.
     */
    dispose(): void;
    /**
     * Get the layout orientation for the split panel.
     */
    /**
     * Set the layout orientation for the split panel.
     */
    orientation: Orientation;
    /**
     * Get the inter-element spacing for the split panel.
     */
    /**
     * Set the inter-element spacing for the split panel.
     */
    spacing: number;
    /**
     * Get the normalized sizes of the widgets in the panel.
     *
     * @returns The normalized sizes of the widgets in the panel.
     */
    sizes(): number[];
    /**
     * Set the relative sizes for the child widgets in the panel.
     *
     * @param sizes - The relative sizes for the children in the panel.
     *   These values will be normalized to the available layout space.
     *
     * #### Notes
     * Extra values are ignored, too few will yield an undefined layout.
     */
    setSizes(sizes: number[]): void;
    /**
     * Handle the DOM events for the split panel.
     *
     * @param event - The DOM event sent to the panel.
     *
     * #### Notes
     * This method implements the DOM `EventListener` interface and is
     * called in response to events on the panel's DOM node. It should
     * not be called directly by user code.
     */
    handleEvent(event: Event): void;
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * A message handler invoked on a `'before-detach'` message.
     */
    protected onBeforeDetach(msg: Message): void;
    /**
     * Handle the `'keydown'` event for the split panel.
     */
    private _evtKeyDown(event);
    /**
     * Handle the `'mousedown'` event for the split panel.
     */
    private _evtMouseDown(event);
    /**
     * Handle the `'mousemove'` event for the split panel.
     */
    private _evtMouseMove(event);
    /**
     * Handle the `'mouseup'` event for the split panel.
     */
    private _evtMouseUp(event);
    /**
     * Release the mouse grab for the split panel.
     */
    private _releaseMouse();
    private _pressData;
}
/**
 * The namespace for the `SplitPanel` class statics.
 */
export declare namespace SplitPanel {
    /**
     * A convenience alias of the `Horizontal` [[Orientation]].
     */
    const Horizontal: Orientation;
    /**
     * A convenience alias of the `Vertical` [[Orientation]].
     */
    const Vertical: Orientation;
    /**
     * Get the split panel stretch factor for the given widget.
     *
     * @param widget - The widget of interest.
     *
     * @returns The split panel stretch factor for the widget.
     */
    function getStretch(widget: Widget): number;
    /**
     * Set the split panel stretch factor for the given widget.
     *
     * @param widget - The widget of interest.
     *
     * @param value - The value for the stretch factor.
     */
    function setStretch(widget: Widget, value: number): void;
}
/**
 * A layout which arranges its children into resizable sections.
 */
export declare class SplitLayout extends PanelLayout {
    /**
     * Get the layout orientation for the split layout.
     */
    /**
     * Set the layout orientation for the split layout.
     */
    orientation: Orientation;
    /**
     * Get the inter-element spacing for the split layout.
     */
    /**
     * Set the inter-element spacing for the split layout.
     */
    spacing: number;
    /**
     * Get the normalized sizes of the widgets in the layout.
     *
     * @returns The normalized sizes of the widgets in the layout.
     */
    sizes(): number[];
    /**
     * Set the relative sizes for the child widgets in the layout.
     *
     * @param sizes - The relative sizes for the children in the layout.
     *   These values will be normalized to the available layout space.
     *
     * #### Notes
     * Extra values are ignored, too few will yield an undefined layout.
     */
    setSizes(sizes: number[]): void;
    /**
     * Find the split handle node which contains the given target.
     *
     * @param target - The target node of interest.
     *
     * @returns An object which holds the `index` and the `handle` node
     *   which contains the specified target. If no match is found, the
     *   returned `index` will be `-1` and the `handle` will be `null`.
     */
    findHandle(target: HTMLElement): {
        index: number;
        handle: HTMLElement;
    };
    /**
     * Move a split handle to the specified offset position.
     *
     * @param index - The index of the handle of the interest.
     *
     * @param position - The desired offset position of the handle. This
     *   is the absolute position relative to the origin of the parent.
     *
     * #### Notes
     * This will move the specified handle as close as possible to the
     * desired position, adjusting sibling children if required. It will
     * not violate the size constraints of any child.
     */
    moveHandle(index: number, position: number): void;
    /**
     * Initialize the children of the layout.
     *
     * #### Notes
     * This method is called automatically when the layout is installed
     * on its parent widget.
     */
    protected initialize(): void;
    /**
     * Attach a child widget to the parent's DOM node.
     *
     * @param index - The current index of the child in the layout.
     *
     * @param child - The child widget to attach to the parent.
     *
     * #### Notes
     * This is a reimplementation of the superclass method.
     */
    protected attachChild(index: number, child: Widget): void;
    /**
     * Move a child widget in the parent's DOM node.
     *
     * @param fromIndex - The previous index of the child in the layout.
     *
     * @param toIndex - The current index of the child in the layout.
     *
     * @param child - The child widget to move in the parent.
     *
     * #### Notes
     * This is a reimplementation of the superclass method.
     */
    protected moveChild(fromIndex: number, toIndex: number, child: Widget): void;
    /**
     * Detach a child widget from the parent's DOM node.
     *
     * @param index - The previous index of the child in the layout.
     *
     * @param child - The child widget to detach from the parent.
     *
     * #### Notes
     * This is a reimplementation of the superclass method.
     */
    protected detachChild(index: number, child: Widget): void;
    /**
     * A message handler invoked on an `'after-show'` message.
     */
    protected onAfterShow(msg: Message): void;
    /**
     * A message handler invoked on an `'after-attach'` message.
     */
    protected onAfterAttach(msg: Message): void;
    /**
     * A message handler invoked on a `'child-shown'` message.
     */
    protected onChildShown(msg: ChildMessage): void;
    /**
     * A message handler invoked on a `'child-hidden'` message.
     */
    protected onChildHidden(msg: ChildMessage): void;
    /**
     * A message handler invoked on a `'resize'` message.
     */
    protected onResize(msg: ResizeMessage): void;
    /**
     * A message handler invoked on an `'update-request'` message.
     */
    protected onUpdateRequest(msg: Message): void;
    /**
     * A message handler invoked on a `'fit-request'` message.
     */
    protected onFitRequest(msg: Message): void;
}
/**
 * The namespace for the `SplitLayout` class statics.
 */
export declare namespace SplitLayout {
    /**
     * A convenience alias of the `Horizontal` [[Orientation]].
     */
    const Horizontal: Orientation;
    /**
     * A convenience alias of the `Vertical` [[Orientation]].
     */
    const Vertical: Orientation;
    /**
     * Get the split layout stretch factor for the given widget.
     *
     * @param widget - The widget of interest.
     *
     * @returns The split layout stretch factor for the widget.
     */
    function getStretch(widget: Widget): number;
    /**
     * Set the split layout stretch factor for the given widget.
     *
     * @param widget - The widget of interest.
     *
     * @param value - The value for the stretch factor.
     */
    function setStretch(widget: Widget, value: number): void;
}
