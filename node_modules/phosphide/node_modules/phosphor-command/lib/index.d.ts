import { ISignal, Signal } from 'phosphor-signaling';
/**
 * An object which implements the command pattern.
 */
export interface ICommand {
    /**
     * A signal emitted when the command's state changes.
     *
     * #### Notes
     * Consumers of the command can subscribe to this signal in order to
     * update their visual representation of the command when it changes.
     */
    changed: ISignal<ICommand, void>;
    /**
     * Test whether the command is enabled.
     *
     * @returns `true` if the command is enabled, `false` otherwise.
     *
     * #### Notes
     * The [[changed]] signal should be emitted if the return value
     * changes at runtime.
     */
    isEnabled(): boolean;
    /**
     * Test whether the command is checked.
     *
     * @returns `true` if the command is checked, `false` otherwise.
     *
     * #### Notes
     * The [[changed]] signal should be emitted if the return value
     * changes at runtime.
     */
    isChecked(): boolean;
    /**
     * Execute the command with the specified arguments.
     *
     * @param args - The arguments for the command. The args should be
     *   simple JSON types. If the command does not require arguments,
     *   this may be `null`.
     *
     * #### Notes
     * Calling `execute` when `isEnabled` returns `false` will result
     * in undefined behavior.
     */
    execute(args: any): void;
}
/**
 * An abstract base class for implementing concrete commands.
 */
export declare abstract class Command implements ICommand {
    /**
     * A signal emitted when the command's state changes.
     *
     * **See also:** [[changed]]
     */
    static changedSignal: Signal<Command, void>;
    /**
     * A signal emitted when the command's state changes.
     *
     * #### Notes
     * This should be emitted by a subclass as necessary.
     *
     * This is a pure delegate to the [[changedSignal]].
     */
    changed: ISignal<Command, void>;
    /**
     * Test whether the command is enabled.
     *
     * @returns `true` if the command is enabled, `false` otherwise.
     *
     * #### Notes
     * A subclass may reimplement this method as needed. If the state
     * changes at runtime, the [[changed]] signal should be emitted.
     *
     * The default implementation of this method returns `true`.
     */
    isEnabled(): boolean;
    /**
     * Test whether the command is checked.
     *
     * @returns `true` if the command is checked, `false` otherwise.
     *
     * #### Notes
     * A subclass may reimplement this method as needed. If the state
     * changes at runtime, the [[changed]] signal should be emitted.
     *
     * The default implementation of this method returns `false`.
     */
    isChecked(): boolean;
    /**
     * Execute the command with the specified arguments.
     *
     * @param args - The arguments for the command. The args should be
     *   simple JSON types. If the command does not require arguments,
     *   this may be `null`.
     *
     * #### Notes
     * Calling `execute` when `isEnabled` returns `false` will result
     * in undefined behavior.
     *
     * This abstract method must be implemented by a subclass.
     */
    abstract execute(args: any): void;
}
/**
 * A concrete implementation of [[ICommand]].
 *
 * A `DelegateCommand` wraps a function to facilitate the creation of
 * simple commands without requiring subclassing or extra boilerplate.
 */
export declare class DelegateCommand extends Command {
    /**
     * Construct a new delegate command.
     *
     * @param execute - The function which executes the command logic.
     */
    constructor(execute: (args: any) => void);
    /**
     * Get the enabled state of the delegate command.
     */
    /**
     * Set the enabled state of the delegate command.
     *
     * #### Notes
     * This will emit the [[changed]] signal if the state changes.
     */
    enabled: boolean;
    /**
     * Get the checked state of the delegate command.
     */
    /**
     * Set the checked state of the delegate command.
     *
     * #### Notes
     * This will emit the [[changed]] signal if the state changes.
     */
    checked: boolean;
    /**
     * Test whether the command is enabled.
     *
     * @returns `true` if the command is enabled, `false` otherwise.
     *
     * #### Notes
     * This returns the command's [[enabled]] state.
     */
    isEnabled(): boolean;
    /**
     * Test whether the command is checked.
     *
     * @returns `true` if the command is checked, `false` otherwise.
     *
     * #### Notes
     * This returns the command's [[checked]] state.
     */
    isChecked(): boolean;
    /**
     * Execute the command with the specified arguments.
     *
     * @param args - The arguments for the command. The args should be
     *   simple JSON types. If the command does not require arguments,
     *   this may be `null`.
     *
     * #### Notes
     * Calling `execute` when `isEnabled` returns `false` will result
     * in undefined behavior.
     */
    execute(args: any): void;
    private _enabled;
    private _checked;
    private _execute;
}
