/*-----------------------------------------------------------------------------
| Copyright (c) 2014-2015, PhosphorJS Contributors
|
| Distributed under the terms of the BSD 3-Clause License.
|
| The full license is in the file LICENSE, distributed with this software.
|----------------------------------------------------------------------------*/
'use strict';
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var phosphor_signaling_1 = require('phosphor-signaling');
/**
 * An abstract base class for implementing concrete commands.
 */
var Command = (function () {
    function Command() {
    }
    Object.defineProperty(Command.prototype, "changed", {
        /**
         * A signal emitted when the command's state changes.
         *
         * #### Notes
         * This should be emitted by a subclass as necessary.
         *
         * This is a pure delegate to the [[changedSignal]].
         */
        get: function () {
            return Command.changedSignal.bind(this);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Test whether the command is enabled.
     *
     * @returns `true` if the command is enabled, `false` otherwise.
     *
     * #### Notes
     * A subclass may reimplement this method as needed. If the state
     * changes at runtime, the [[changed]] signal should be emitted.
     *
     * The default implementation of this method returns `true`.
     */
    Command.prototype.isEnabled = function () {
        return true;
    };
    /**
     * Test whether the command is checked.
     *
     * @returns `true` if the command is checked, `false` otherwise.
     *
     * #### Notes
     * A subclass may reimplement this method as needed. If the state
     * changes at runtime, the [[changed]] signal should be emitted.
     *
     * The default implementation of this method returns `false`.
     */
    Command.prototype.isChecked = function () {
        return false;
    };
    /**
     * A signal emitted when the command's state changes.
     *
     * **See also:** [[changed]]
     */
    Command.changedSignal = new phosphor_signaling_1.Signal();
    return Command;
})();
exports.Command = Command;
/**
 * A concrete implementation of [[ICommand]].
 *
 * A `DelegateCommand` wraps a function to facilitate the creation of
 * simple commands without requiring subclassing or extra boilerplate.
 */
var DelegateCommand = (function (_super) {
    __extends(DelegateCommand, _super);
    /**
     * Construct a new delegate command.
     *
     * @param execute - The function which executes the command logic.
     */
    function DelegateCommand(execute) {
        _super.call(this);
        this._enabled = true;
        this._checked = false;
        this._execute = execute;
    }
    Object.defineProperty(DelegateCommand.prototype, "enabled", {
        /**
         * Get the enabled state of the delegate command.
         */
        get: function () {
            return this._enabled;
        },
        /**
         * Set the enabled state of the delegate command.
         *
         * #### Notes
         * This will emit the [[changed]] signal if the state changes.
         */
        set: function (value) {
            if (this._enabled === value) {
                return;
            }
            this._enabled = value;
            this.changed.emit(void 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DelegateCommand.prototype, "checked", {
        /**
         * Get the checked state of the delegate command.
         */
        get: function () {
            return this._checked;
        },
        /**
         * Set the checked state of the delegate command.
         *
         * #### Notes
         * This will emit the [[changed]] signal if the state changes.
         */
        set: function (value) {
            if (this._checked === value) {
                return;
            }
            this._checked = value;
            this.changed.emit(void 0);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Test whether the command is enabled.
     *
     * @returns `true` if the command is enabled, `false` otherwise.
     *
     * #### Notes
     * This returns the command's [[enabled]] state.
     */
    DelegateCommand.prototype.isEnabled = function () {
        return this._enabled;
    };
    /**
     * Test whether the command is checked.
     *
     * @returns `true` if the command is checked, `false` otherwise.
     *
     * #### Notes
     * This returns the command's [[checked]] state.
     */
    DelegateCommand.prototype.isChecked = function () {
        return this._checked;
    };
    /**
     * Execute the command with the specified arguments.
     *
     * @param args - The arguments for the command. The args should be
     *   simple JSON types. If the command does not require arguments,
     *   this may be `null`.
     *
     * #### Notes
     * Calling `execute` when `isEnabled` returns `false` will result
     * in undefined behavior.
     */
    DelegateCommand.prototype.execute = function (args) {
        this._execute.call(void 0, args);
    };
    return DelegateCommand;
})(Command);
exports.DelegateCommand = DelegateCommand;
//# sourceMappingURL=index.js.map