/*-----------------------------------------------------------------------------
| Copyright (c) 2014-2015, PhosphorJS Contributors
|
| Distributed under the terms of the BSD 3-Clause License.
|
| The full license is in the file LICENSE, distributed with this software.
|----------------------------------------------------------------------------*/
'use strict';
var phosphor_disposable_1 = require('phosphor-disposable');
var phosphor_signaling_1 = require('phosphor-signaling');
var index_1 = require('./index');
/**
 * Register the plugin contributions.
 *
 * @param container - The di container for type registration.
 *
 * #### Notes
 * This is called automatically when the plugin is loaded.
 */
function register(container) {
    container.register(index_1.ICommandRegistry, CommandRegistry);
}
exports.register = register;
/**
 * A concrete implementation of ICommandRegistry.
 */
var CommandRegistry = (function () {
    /**
     * Construct a new command registry instance.
     */
    function CommandRegistry() {
        this._map = Object.create(null);
    }
    /**
     * Create a new command registry instance.
     */
    CommandRegistry.create = function () {
        return new CommandRegistry();
    };
    Object.defineProperty(CommandRegistry.prototype, "commandsAdded", {
        /**
         * A signal emitted when commands are added to the registry.
         */
        get: function () {
            return CommandRegistryPrivate.commandsAddedSignal.bind(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CommandRegistry.prototype, "commandsRemoved", {
        /**
         * A signal emitted when commands are removed from the registry.
         */
        get: function () {
            return CommandRegistryPrivate.commandsRemovedSignal.bind(this);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * List the ids of the currently registered commands.
     *
     * @returns A new array of the registered command ids.
     */
    CommandRegistry.prototype.list = function () {
        return Object.keys(this._map);
    };
    /**
     * Test whether a command with a specific id is registered.
     *
     * @param id - The id of the command of interest.
     *
     * @returns `true` if the command is registered, `false` otherwise.
     */
    CommandRegistry.prototype.has = function (id) {
        return id in this._map;
    };
    /**
     * Lookup a command with a specific id.
     *
     * @param id - The id of the command of interest.
     *
     * @returns The command with the specified id, or `undefined`.
     */
    CommandRegistry.prototype.get = function (id) {
        return this._map[id];
    };
    /**
     * Add commands to the registry.
     *
     * @param items - The command items to add to the registry.
     *
     * @returns A disposable which will remove the added commands.
     *
     * #### Notes
     * If the `id` for a command is already registered, a warning will be
     * logged to the console and that specific command will be ignored.
     */
    CommandRegistry.prototype.add = function (items) {
        var _this = this;
        var added = [];
        for (var _i = 0; _i < items.length; _i++) {
            var _a = items[_i], id = _a.id, command = _a.command;
            if (id in this._map) {
                console.warn("Command '" + id + "' is already registered.");
            }
            else {
                added.push(id);
                this._map[id] = command;
            }
        }
        if (added.length === 0) {
            return new phosphor_disposable_1.DisposableDelegate(null);
        }
        this.commandsAdded.emit(added.slice());
        return new phosphor_disposable_1.DisposableDelegate(function () {
            for (var _i = 0; _i < added.length; _i++) {
                var id = added[_i];
                delete _this._map[id];
            }
            _this.commandsRemoved.emit(added.slice());
        });
    };
    /**
     * A convenience method to execute a registered command.
     *
     * @param id - The id of the command to execute.
     *
     * @param args - The arguments object to pass to the command. This
     *   may be `null` if the command does not require arguments.
     *
     * #### Notes
     * If the command is not registered or is not enabled, a warning will
     * be logged to the console. If the command throws an exception, the
     * exception will be propagated to the caller.
     *
     * If more control over execution is required, the command should be
     * retrieved from the registry and used directly.
     */
    CommandRegistry.prototype.execute = function (id, args) {
        var cmd = this._map[id];
        if (!cmd) {
            console.warn("Command '" + id + "' is not registered.");
            return;
        }
        if (!cmd.isEnabled()) {
            console.warn("Command '" + id + "' is not enabled.");
            return;
        }
        cmd.execute(args);
    };
    /**
     * A convenience method to safely execute a registered command.
     *
     * @param id - The id of the command to execute.
     *
     * @param args - The arguments object to pass to the command. This
     *   may be `null` if the command does not require arguments.
     *
     * #### Notes
     * If the command is not registered or is not enabled, a warning will
     * be logged to the console. If the command throws an exception, the
     * exception will be logged to the console.
     *
     * If more control over execution is required, the command should be
     * retrieved from the registry and used directly.
     */
    CommandRegistry.prototype.safeExecute = function (id, args) {
        try {
            this.execute(id, args);
        }
        catch (err) {
            console.error(err);
        }
    };
    /**
     * The dependencies required by the command registry.
     */
    CommandRegistry.requires = [];
    return CommandRegistry;
})();
/**
 * The namespace for the `CommandRegistry` class private data.
 */
var CommandRegistryPrivate;
(function (CommandRegistryPrivate) {
    /**
     * A signal emitted when commands are added to the registry.
     */
    CommandRegistryPrivate.commandsAddedSignal = new phosphor_signaling_1.Signal();
    /**
     * A signal emitted when commands are removed from the registry.
     */
    CommandRegistryPrivate.commandsRemovedSignal = new phosphor_signaling_1.Signal();
})(CommandRegistryPrivate || (CommandRegistryPrivate = {}));
