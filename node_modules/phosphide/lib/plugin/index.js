/*-----------------------------------------------------------------------------
| Copyright (c) 2014-2015, PhosphorJS Contributors
|
| Distributed under the terms of the BSD 3-Clause License.
|
| The full license is in the file LICENSE, distributed with this software.
|----------------------------------------------------------------------------*/
'use strict';
var phosphor_properties_1 = require('phosphor-properties');
/**
 * Load a collection of plugins for the application.
 *
 * @param container - The dependency injection container to use when
 *   loading the plugins.
 *
 * @param plugins - The plugins to load. A given plugin will only be
 *   loaded once for a specific container instance.
 *
 * @returns A promise which resolves when all plugins have been fully
 *   loaded, or rejects if an error occurs.
 */
function loadPlugins(container, plugins) {
    // Lookup the plugin set for the container.
    var pluginSet = PluginPrivate.pluginSetProperty.get(container);
    // Filter for the new plugins.
    var newPlugins = [];
    for (var _i = 0; _i < plugins.length; _i++) {
        var plugin = plugins[_i];
        if (plugin && !pluginSet.has(plugin)) {
            pluginSet.add(plugin);
            newPlugins.push(plugin);
        }
    }
    // Register the new plugins.
    for (var _a = 0; _a < newPlugins.length; _a++) {
        var plugin = newPlugins[_a];
        if (plugin.register) {
            plugin.register(container);
        }
    }
    // Resolve the new plugins.
    var promises = [];
    for (var _b = 0; _b < newPlugins.length; _b++) {
        var plugin = newPlugins[_b];
        if (plugin.resolve) {
            var result = plugin.resolve(container);
            if (result)
                promises.push(result);
        }
    }
    // Wait for the new plugins to finish.
    return Promise.all(promises).then(function () { });
}
exports.loadPlugins = loadPlugins;
/**
 * The namespace for the plugin private data.
 */
var PluginPrivate;
(function (PluginPrivate) {
    /**
     * The property descriptor for a container's plugin set.
     */
    PluginPrivate.pluginSetProperty = new phosphor_properties_1.Property({
        name: 'pluginSet',
        create: function () { return new Set(); },
    });
})(PluginPrivate || (PluginPrivate = {}));
